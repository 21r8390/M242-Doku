{"config":{"lang":["de"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Startseite","text":"<p>Dies ist die Dokumentation \u00fcber PHP, in welcher die Grundschritte und wichtige Methoden beschrieben werden.</p>"},{"location":"index.html#inhaltsverzeichnis","title":"Inhaltsverzeichnis","text":"<p>Diese Seite enth\u00e4lt ein Inhaltsverzeichnis, welche die Seiten kategorisiert. Das Verzeichnis hilft zur schnellen Navigation, da gewisse Aufgaben zusammen genommen wurden.</p>"},{"location":"index.html#kapitel","title":"Kapitel","text":"<ul> <li>Aufbau &amp; Funktion<ul> <li>Mikrocontroller</li> <li>Mikroprozessoren</li> <li>Microcomputer</li> <li>Unterschied</li> <li>ALU</li> <li>Register</li> <li>CU</li> <li>CPU</li> <li>Cache<ul> <li>Verschiedene Arten</li> <li>Cache-Hit</li> </ul> </li> <li>Z\u00e4hler</li> <li>Externer PIN =&gt; GPIO</li> <li>I/O</li> <li>Kooperativ vs ...</li> </ul> </li> <li>Komponenten<ul> <li>RAM</li> <li>Speicherbegriffe<ul> <li>EPROM</li> <li>EEPROM</li> <li>Flash</li> <li>Dynamisch</li> <li>Statisch</li> </ul> </li> <li>Port</li> <li>Timer<ul> <li>Periodic</li> <li>Once</li> </ul> </li> </ul> </li> <li>Programmierung<ul> <li>Semaphoren</li> <li>Interrupt</li> <li>Watchdog</li> <li>Betriebssystem</li> <li>RTOS</li> <li>Bits Schreiben</li> <li>Ablauf einer Befehlsausf\u00fchrung</li> <li>Endlosschleife</li> </ul> </li> <li>Schaltungen</li> </ul>"},{"location":"Tags.html","title":"Tags","text":"<p>Diese Webseite verf\u00fcgt \u00fcber folgende Tags:</p>"},{"location":"Tags.html#aufbau-funktion","title":"Aufbau &amp; Funktion","text":"<ul> <li>ALU</li> <li>CU</li> <li>Cache</li> <li>Register</li> </ul>"},{"location":"Tags.html#komponenten","title":"Komponenten","text":"<ul> <li>Speicherbegriffe</li> </ul>"},{"location":"Tags.html#micro-","title":"Micro-","text":"<ul> <li>Microcomputer</li> <li>Microcontroller</li> <li>Microprozessor</li> <li>Unterschiede</li> </ul>"},{"location":"Tags.html#programmierung","title":"Programmierung","text":"<ul> <li>Befehlsausf\u00fchrung</li> <li>Interrupt</li> <li>Multitasking</li> <li>RTOS</li> <li>Semaphoren</li> <li>Timer</li> </ul>"},{"location":"Aufbau/ALU.html","title":"Arithmetic Logic Unit (ALU) / Rechenwerk","text":"<p>Das Rechenwerk ist der eigentliche Rechner. Es wird als Arithmetic Logic Unit, kurz ALU, bezeichnet. In der ALU werden alle arithmetische und logische Funktionen und Berechnungen ausgef\u00fchrt. Zur ALU geh\u00f6ren auch der Akku (Speicher) und die Flags (Ereignisspeicher). Durch das Rechenwerk wird das Befehlswerk in die Lage versetzt Daten zu verarbeiten.</p> <p></p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/ALU.html#aufbau","title":"Aufbau","text":"<p>Ein Mikroprozessor besitzt die F\u00e4higkeit Daten zu verarbeiten. Dazu geh\u00f6rt es auch, Zahlen zu berechnen, sie logisch zu verkn\u00fcpfen und das Ergebnis auszugeben. Alle mathematischen und logischen Vorg\u00e4nge in einem Mikroprozessor werden von der ALU ausgef\u00fchrt.</p> <p>Die ALU ist eine Universal-Schaltung, die zwei n-Bit Datenworte wahlweise:</p> <ul> <li>addiert</li> <li>subtrahiert</li> <li>UND-verkn\u00fcpft</li> <li>ODER-verkn\u00fcpft</li> <li>XOR-verkn\u00fcpft</li> </ul> <p></p> <p>Quelle</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/ALU.html#fpu-floating-point-unit","title":"FPU - Floating Point Unit","text":"<p>Da das urspr\u00fcngliche Rechenwerk, die ALU, f\u00fcr vielerlei Verarbeitungsprozesse wenig geeignet war, wurden zus\u00e4tzliche Recheneinheiten entwickelt, die f\u00fcr bestimmte Aufgaben optimiert wurden.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/ALU.html#mmu-memory-management-unit","title":"MMU - Memory Management Unit","text":"<p>Die MMU ist ein wichtiger Teil eines Prozessors, wenn es darum geht, Teile des Speichers zu reservieren, um Software in gesch\u00fctzten Bereichen ablaufen lassen zu k\u00f6nnen. Sonst w\u00fcrde man st\u00e4ndig Gefahr laufen, dass parallel laufende Applikationen sich gegenseitig \u00fcberschreiben w\u00fcrden. Die Folge w\u00e4re, dass ein solcher Fehler das Gesamtsystem zum Absturz bringen w\u00fcrde.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/CU.html","title":"Control Unit (CU) / Steuerwerk / Leitwerk / Befehlswerk","text":"<p>Die Control Unit (CU) bzw. das Steuerwerk wird in mancher Literatur auch als Leitwerk oder Befehlswerk bezeichnet. Das Steuerwerk ist die Steuereinheit, die f\u00fcr die Zusammenarbeit der einzelnen Teile des Prozessors verantwortlich ist. F\u00fcr die Aufgaben des Steuerwerks steht ein internes Bussystem zur Verf\u00fcgung.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/CU.html#aufgaben","title":"Aufgaben","text":"<ul> <li>Lesen von Daten aus dem RAM</li> <li>Speichern von Daten im RAM</li> <li>Bereitstellen, Decodieren und Ausf\u00fchren eines Befehls</li> <li>Verarbeiten der Eingaben von peripheren Ger\u00e4ten</li> <li>Verarbeiten von Ausgaben an periphere Ger\u00e4te</li> <li>Interrupt-Steuerung</li> <li>\u00dcberwachung des gesamten Systems</li> </ul>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/CU.html#aufbau","title":"Aufbau","text":"<p>Im Steuerwerk befindet sich das Befehlsregister, das alle Befehle enth\u00e4lt, die der Prozessor ausf\u00fchren kann. Hier werden auch die Befehle dekodiert. Der Befehlsdecoder \u00fcbersetzt die Befehle und \u00fcbergibt sie der Ausf\u00fchrungseinheit, die den Befehl dann ausf\u00fchrt. Die Ausf\u00fchrungseinheit \u00fcbergibt die Daten zur Berechnung an das Rechenwerk und erh\u00e4lt von dort das Ergebnis zur\u00fcck. Wichtige Daten, die w\u00e4hrend der Ausf\u00fchrung gebraucht werden, werden in Registern zwischengespeichert. Ein Register ist der schnellste Speicher in einem Prozessor. Dann gibt es noch eine zeitliche und logische Steuerung, die auf das Rechenwerk bei Rechenoperationen zugreift. Von hier wird auch der Steuerbus, die Interrupts und die serielle Ein- und Ausgabe gesteuert.</p> <p></p> <p>Quelle</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html","title":"Cache","text":"<p>Der Cache ist ein spezieller Puffer-Speicher, der zwischen dem Arbeitsspeicher und dem Prozessor liegt. Damit der Prozessor nicht jeden Programm-Befehl einzeln aus dem langsamen Arbeitsspeicher holen muss, wird gleich ein ganzer Befehls- bzw. Datenblock vom Arbeitsspeicher in den Cache geladen. Die Wahrscheinlichkeit, dass die nachfolgenden Programmbefehle im Cache liegen, ist relativ hoch. Erst wenn alle Programm-Befehle abgearbeitet sind oder ein Sprungbefehl zu einer Sprungadresse ausserhalb des Caches f\u00fchrt, dann muss der Prozessor erneut auf den Arbeitsspeicher zugreifen. Deshalb sollte der Cache m\u00f6glichst gross sein, damit der Prozessor die Programm-Befehle ohne Wartezeit hintereinander ausf\u00fchren kann.</p> <p>In der Regel arbeiten Prozessoren mit mehrstufigen Caches, die unterschiedlich gro\u00df und schnell sind. Je n\u00e4her der Cache am Rechenkern ist, desto kleiner und schneller arbeitet er.</p> <p></p> <p>Quelle</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#zweck","title":"Zweck","text":"<p>Der prim\u00e4re Zweck eines Cache ist es, die Zugriffszeit auf wichtige Daten zu reduzieren. Als \u201ewichtige\u201c Daten gelten:</p> <ul> <li> <p>Daten, die h\u00e4ufig ben\u00f6tigt werden: In diesem Fall w\u00e4re es verschwenderisch, die Daten immer wieder aus dem hinter dem Cache liegenden, langsameren Speicher zu laden. Stattdessen werden diese mit k\u00fcrzerer Zugriffszeit aus dem Cache ausgeliefert.</p> </li> <li> <p>Daten, deren Erzeugung ein aufwendiger Prozess zugrunde liegt: Manche Daten sind das Ergebnis einer rechenintensiven Verarbeitung, oder die Daten m\u00fcssen aus verschiedenen Teilen zusammengef\u00fcgt werden. In diesen F\u00e4llen bietet es sich an, die fertigen Daten f\u00fcr weitere Abfragen in einem Cache zu speichern.</p> </li> <li> <p>Daten, die zusammen ben\u00f6tigt werden: In diesem Fall w\u00e4re es ineffizient, die Daten erst dann zu laden, wenn Sie abgerufen werden. Stattdessen ist es sinnvoll, die Daten gemeinsam im Cache vorzuhalten.</p> </li> </ul>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#grundlegendes-cache-schema","title":"Grundlegendes Cache-Schema","text":"<p>Eine Anfrage nach einer Ressource wird an das System bzw. die Software, die \u00fcber einen Cache verf\u00fcgt, gestellt.</p> <ol> <li> <p>Ist die Ressource bereits im Cache enthalten, wird sie aus dem Cache ausgeliefert. Dieser Fall wird als \u201eCache Hit\u201c, also \u201eCache-Treffer\u201c, bezeichnet.</p> </li> <li> <p>Ist die Ressource nicht im Cache enthalten, wird sie zun\u00e4chst aus dem dahinterliegenden System in den Zwischenspeicher geladen und anschlie\u00dfend ausgeliefert. Dieser Fall wird als \u201eCache Miss\u201c, in etwa \u201eCache-Fehlschuss\u201c, bezeichnet.</p> </li> <li> <p>Wird dieselbe Ressource in der Zukunft erneut abgefragt, kann sie ebenfalls als Cache Hit aus dem Cache ausgeliefert werden.</p> </li> </ol>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#layers","title":"Layers","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#l1-cache-first-level-cache","title":"L1-Cache / First-Level-Cache","text":"<p>In der Regel ist der L1-Cache nicht besonders gro\u00df. Aus Platzgr\u00fcnden bewegt er sich in der Gr\u00f6\u00dfenordnung von 16 bis 64 kByte. Meistens ist der Speicherbereich f\u00fcr Befehle und Daten voneinander getrennt. Die Bedeutung des L1-Caches w\u00e4chst mit der h\u00f6heren Geschwindigkeit der CPU. Im L1-Cache werden die am h\u00e4ufigsten ben\u00f6tigten Befehle und Daten zwischengespeichert, damit m\u00f6glichst wenige Zugriffe auf den langsamen Arbeitsspeicher erforderlich sind. Dieser Cache vermeidet Verz\u00f6gerungen in der Daten\u00fcbermittlung und hilft dabei die CPU optimal auszulasten.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#l2-cache-second-level-cache","title":"L2-Cache / Second-Level-Cache","text":"<p>Im L2-Cache werden die Daten des Arbeitsspeichers (RAM) zwischengespeichert. \u00dcber die Gr\u00f6\u00dfe des L2-Caches versorgen die Prozessorhersteller die unterschiedlichen Marktsegmente mit speziell modifizierten Prozessoren. Die Wahl zwischen einem Prozessor mit mehr Taktgeschwindigkeit oder einem gr\u00f6\u00dferen L2-Cache l\u00e4sst sich vereinfacht wie folgt beantworten: Mit einem h\u00f6heren Takt laufen einzelne Programme, insbesondere mit hohem Rechenbedarf, schneller. Sobald mehrere Programme gleichzeitig laufen, ist ein gr\u00f6\u00dferer Cache von Vorteil. In der Regel sind normale Desktop-Computer mit einem Prozessor, der einen gro\u00dfen Cache hat, besser bedient, als mit einem Prozessor, der eine hohe Taktrate hat. Als der Speichercontroller vom Chipsatz in den Prozessor verlagert wurde und der Prozessor damit viel schneller auf den Arbeitsspeicher zugreifen konnte, sank damit die Bedeutung des L2-Caches. W\u00e4hrend die Gr\u00f6\u00dfe des L2-Caches geringer wurde, wurde der L3-Cache ordentlich aufger\u00fcstet.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#l3-cache-third-level-cache","title":"L3-Cache / Third-Level-Cache","text":"<p>In der Regel verwenden Multicore-Prozessoren einen integrierten L3-Cache. Mit dem L3-Cache kann das Cache-Koher\u00e4nz-Protokoll von Multicore-Prozessoren viel schneller arbeiten. Dieses Protokoll gleicht die Caches aller Kerne ab, damit die Datenkonsistenz erhalten bleibt. Der L3-Cache hat also weniger die Funktion eines Caches, sondern soll das Cache-Koher\u00e4nz-Protokoll und den Datenaustausch zwischen den Kernen vereinfachen und beschleunigen.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#arten","title":"Arten","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#hardware-caches","title":"Hardware-Caches","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#prozessor-cache","title":"Prozessor-Cache","text":"<p>Ein moderner Prozessor arbeitet unglaublich schnell. Die Abl\u00e4ufe auf dem Chip ben\u00f6tigen nur Bruchteile von Nanosekunden \u2014 das ist eine Milliardstel Sekunde! Im Gegensatz dazu ist der Zugriff auf den Hauptspeicher mit Hunderten von Nanosekunden vergleichsweise langsam. Aus diesem Grund verf\u00fcgen moderne Prozessoren \u00fcber eine Hierarchie von Prozessor-Caches. Ein Cache Hit auf dem schnellsten Prozessor-Cache, bekannt als \u201eLevel 1-Cache\u201c oder \u201eL1-Cache\u201c, ist rund 200 Mal schneller als ein Zugriff auf den Hauptspeicher.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#festplatten-cache","title":"Festplatten-Cache","text":"<p>Eine Festplatte rotiert mit mehreren Tausend Umdrehungen pro Minute. Der Schreib-Lese-Kopf rast \u00fcber die Scheiben und liest dabei sequenziell Daten aus. Da es sich um einen physischen Prozess handelt, ist der Zugriff auf eine Festplatte vergleichsweise langsam. Aus diesem Grund verf\u00fcgt jede Festplatte \u00fcber einen eigenen kleinen Cache. So m\u00fcssen zumindest die am h\u00e4ufigsten genutzten Daten \u2013 etwa Teile des Betriebssystems \u2013 nicht immer wieder aufwendig von der Festplatte gelesen werden. Durch den Festplatten-Cache k\u00f6nnen essenzielle Daten ca. 100 Mal schneller geladen werden. Sie sind dadurch f\u00fcr den Nutzer gef\u00fchlt \u201esofort\u201c vorhanden.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#software-caches","title":"Software-Caches","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#browser-cache","title":"Browser-Cache","text":"<p>Beim Besuch einer Website werden viele Daten der Seite auf dem Ger\u00e4t des Besuchers zwischengespeichert. Neben den eigentlichen Inhalten geh\u00f6ren dazu verschiedene Ressourcen wie Bilder, Stylesheets und JavaScript-Dateien. F\u00fcr gew\u00f6hnlich werden viele dieser Ressourcen auf mehreren Seiten ben\u00f6tigt. Um das Laden der Seiten zu beschleunigen, ist es vorteilhaft, diese immer wieder ben\u00f6tigten Ressourcen im Browser-Cache des lokalen Ger\u00e4ts zu speichern. So praktisch der Browser-Cache f\u00fcr das Surfen im Netz ist: Er kann auch Probleme verursachen \u2013 etwa dann, wenn die Entwickler \u00c4nderungen an einer Ressource der Website vorgenommen haben, im Browser-Cache aber noch die alte Version der Ressource vorhanden ist. In diesem Fall kann es zu Darstellungsfehlern kommen. Abhilfe schafft dann das Leeren des Browser-Cache.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#dns-cache","title":"DNS-Cache","text":"<p>Das Domain Name System, kurz DNS, ist ein global verteiltes System zur \u00dcbersetzung von Internetdomains in IP-Adressen (bzw. umgekehrt). Das DNS liefert f\u00fcr einen Dom\u00e4nennamen eine IP-Adresse zur\u00fcck. Beispielsweise wird f\u00fcr die Domain ionos.de die IP-Adresse 217.160.86.40 zur\u00fcckgeliefert.</p> <p>Bereits beantwortete Anfragen an das DNS werden lokal auf dem eigenen Ger\u00e4t im DNS-Cache zwischengespeichert. So ist jede Aufl\u00f6sung immer gleich schnell.</p> <p>Doch auch die Nutzung des DNS-Cache kann zu Problemen f\u00fchren \u2013 beispielsweise, wenn sich durch einen Serverumzug die zu einer Domain geh\u00f6rige IP-Adresse ge\u00e4ndert hat, die alte Adresse jedoch noch im lokalen DNS-Cache hinterlegt ist. In diesem Fall schl\u00e4gt der Verbindungsaufbau mit dem Server fehl. Abhilfe schafft dann das L\u00f6schen des DNS-Cache.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#tabelle","title":"Tabelle","text":"Ressource Cache Gr\u00f6\u00dfe Des Cache Zugriffszeit Mit Cache \u00d7 langsamer Ohne Cache Hauptspeicher Level 1-Cache (Hardware) Dutzende Kilobyte (KB) Weniger Als Eine Nanosekunde (ns) 200 \u00d7 Festplatte Festplatten-Cache (Hardware) Dutzende Megabyte (MB) Hunderte Nanosekunden (ns) 100 \u00d7 Browser Browser-Cache (Software) Mehrere Gigabyte (GB) Dutzende Millisekunden (ms) 10\u2013100 \u00d7 Websites CDNs, Google Page Cache, Wayback Machine (Software) Tausende Terabyte (Petabyte, PB) Wenige Sekunden (s) 2\u20135 \u00d7","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#vorteile","title":"Vorteile","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#enormer-zuwachs-an-geschwindigkeit","title":"Enormer Zuwachs an Geschwindigkeit","text":"<p>Die Verwendung eines Cache bietet als potenziellen Vorteil einen enormen Zuwachs an Geschwindigkeit. Eine Beschleunigung um einen Faktor von einhundert ist nicht ungew\u00f6hnlich. Die Beschleunigung ergibt sich jedoch nur beim wiederholten Zugriff auf dieselben Daten. Wie gro\u00df der Zugewinn tats\u00e4chlich ausf\u00e4llt, wird also je nach Anwendungsfall stark variieren.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#lastreduzierung-fur-das-hinter-dem-cache-liegende-system","title":"Lastreduzierung f\u00fcr das hinter dem Cache liegende System","text":"<p>Da ein Cache Daten sehr schnell ausliefert, wird die Last auf das hinter ihm liegende System deutlich reduziert.</p> <p>Stellen Sie sich als Beispiel vor, dass eine dynamische HTML-Seite aus einem PHP-Template erzeugt wird: Zur Erzeugung der Seite wird auf eine Datenbank zugegriffen. Dieser Zugriff ist vergleichsweise aufwendig. Ferner ist es nicht trivial, Datenbankserver zu skalieren, weshalb der Datenbankzugriff als \u201ebottleneck\u201c (zu Deutsch: \u201eFlaschenhals\u201c) den Gesamtdurchsatz des Systems begrenzen kann. In diesem Fall ist es vorteilhaft, die generierte HTML-Seite in einem Web-Cache zwischenzuspeichern, um die Kapazit\u00e4t des Datenbankservers f\u00fcr andere Aufgaben zu nutzen.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#nachteile","title":"Nachteile","text":"","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Cache.html#cache-invalidierung-ist-schwierig","title":"Cache-Invalidierung ist schwierig","text":"<p>Der Begriff Cache-Invalidierung bezeichnet die Entscheidung dar\u00fcber, wann zwischengespeicherte Daten nicht mehr aktuell sind und erneuert werden m\u00fcssen. Erinnern Sie sich an das analoge Beispiel von oben: Die Arzthelferin agiert als Cache f\u00fcr den Arzt, indem sie bereits benutzte Ressourcen f\u00fcr den weiteren Gebrauch bereit legt. Da auf der Ablage nur ein begrenzter Platz bereitsteht, r\u00e4umt die Arzthelferin w\u00e4hrend der Behandlung kontinuierlich auf. Bereits benutzte Ressourcen m\u00fcssen entfernt, neue hinzugef\u00fcgt werden. Unter Umst\u00e4nden entfernt die Arzthelferin auch eine Ressource, die der Arzt noch einmal ben\u00f6tigt. In diesem Fall kommt es konzeptuell zu einem Cache Miss. Die Arzthelferin muss die ben\u00f6tigte Ressource dann erst aufwendig lokalisieren.</p> <p>Da der Cache Miss kostspielig ist, zielt die optimale Caching-Strategie darauf ab, diesen m\u00f6glichst zu vermeiden. Andererseits kann das dazu f\u00fchren, dass der Cache Daten ausliefert, die nicht mehr aktuell sind. Dieses Problem wird noch versch\u00e4rft, wenn mehrere, hierarchisch angrenzende Caches aktiv sind. Es kann dann schwierig sein zu bestimmen, wann welche Daten im Cache als nicht mehr aktuell markiert werden sollen.</p> <p>Liefert ein Cache Daten aus, die nicht mehr aktuell sind, f\u00fchrt dies oft auf der Seite des Anwenders zu seltsamen Problemen: Die besuchte Website hat Darstellungsfehler oder es erscheinen beim Datenabruf Fragmente aus der Vergangenheit. Mitunter kann es schwierig sein, die genaue Herkunft der Probleme zu ermitteln, weshalb in diesem Fall das Leeren des Cache die beste L\u00f6sung darstellt.</p> <p>Quelle</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Register.html","title":"Interner Speicher (Akku/Register)","text":"<p>Der Akku ist ein interner Speicher und Teil des Rechenwerks. W\u00e4hrend man in den ersten Mikroprozessoren den internen Speicher noch Akkumulator, kurz Akku, nannte, haben die gleiche Aufgabe heute die Register. Zum internen Speicher geh\u00f6ren wichtige Register, die als Zwischenspeicher dienen und der Befehlsz\u00e4hler, in dem steht aus welcher Speicherzelle der n\u00e4chste Befehl geladen wird.</p> <p>Quelle</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Register.html#arten","title":"Arten","text":"<p>Ein Register ist eine spezielle Art von Speicher in einem Computer oder Mikroprozessor, der dazu dient, Daten tempor\u00e4r zu speichern und auf die diese Daten schnell zugegriffen werden kann. Es handelt sich um eine kleine und schnelle Speicherzelle, die Teil des Prozessors ist und eng mit seiner internen Logik verbunden ist.</p> <p>Es gibt verschiedene Arten von Registern, die verschiedene Zwecke erf\u00fcllen:</p> <ul> <li> <p>Allgemeine Register: Diese werden zur Speicherung von Daten verwendet, die vom Prozessor w\u00e4hrend der Ausf\u00fchrung von Anweisungen manipuliert werden. Sie dienen zur Zwischenspeicherung von Operanden, Zwischenergebnissen und Ergebnissen von Berechnungen.</p> </li> <li> <p>Statusregister: Dieses Register enth\u00e4lt Statusinformationen \u00fcber den Zustand des Prozessors oder bestimmte Bedingungen, die durch die Ausf\u00fchrung von Anweisungen entstehen k\u00f6nnen. Zum Beispiel kann es Flags enthalten, die anzeigen, ob eine vorherige Berechnung ein \u00dcberlauf oder eine Null erreicht hat.</p> </li> <li> <p>Befehlsz\u00e4hler (Program Counter): Dieses Register enth\u00e4lt die Speicheradresse des n\u00e4chsten auszuf\u00fchrenden Befehls im Programm. Nachdem ein Befehl abgeschlossen ist, wird der Program Counter aktualisiert, um auf den n\u00e4chsten Befehl zu verweisen.</p> </li> <li> <p>Adressregister: Diese Register enthalten Adressinformationen, die f\u00fcr den Zugriff auf Speicherstellen oder Peripherieger\u00e4te verwendet werden. Sie k\u00f6nnen auch als Indexregister fungieren, um den Zugriff auf Speicheradressen zu vereinfachen.</p> </li> </ul> <p>Register sind normalerweise in begrenzter Anzahl vorhanden und ihre Gr\u00f6\u00dfe h\u00e4ngt von der Architektur des Prozessors ab. Sie erm\u00f6glichen eine schnellere Datenverarbeitung, da der Zugriff auf sie wesentlich schneller ist als der Zugriff auf den Hauptspeicher. Durch die Verwendung von Registern kann die Leistung und Effizienz eines Prozessors verbessert werden.</p>","tags":["Aufbau & Funktion"]},{"location":"Aufbau/Register.html#akkumulator","title":"Akkumulator","text":"<p>Ein Akkumulator ist ein spezielles Register in einem Computer oder Mikroprozessor, das f\u00fcr die Durchf\u00fchrung arithmetischer und logischer Operationen verwendet wird. Es ist ein allgemeines Register, das oft f\u00fcr Zwischenspeicherungszwecke und zur Speicherung von Ergebnissen von Berechnungen dient.</p> <p>Der Begriff \"Akkumulator\" stammt aus der fr\u00fchen \u00c4ra der Computer, als die meisten Maschinen nur \u00fcber einen einzigen Akkumulator verf\u00fcgten. Heutzutage haben moderne Prozessoren normalerweise mehrere allgemeine Register, aber der Begriff \"Akkumulator\" wird immer noch verwendet, um ein bestimmtes Register zu bezeichnen, das f\u00fcr \u00e4hnliche Zwecke verwendet wird.</p> <p>Ein Akkumulator kann als tempor\u00e4rer Speicher betrachtet werden, in dem Operanden f\u00fcr arithmetische oder logische Operationen zwischengespeichert werden. Der Inhalt des Akkumulators wird mit anderen Daten im Prozessor manipuliert, um Berechnungen durchzuf\u00fchren. Das Ergebnis einer Operation wird normalerweise im Akkumulator gespeichert, von wo aus es weiterverwendet oder in den Hauptspeicher geschrieben werden kann.</p> <p>Die Verwendung eines Akkumulators erm\u00f6glicht es dem Prozessor, wiederholt auf die Daten zuzugreifen, ohne st\u00e4ndig auf den Hauptspeicher zugreifen zu m\u00fcssen. Dies f\u00fchrt zu einer verbesserten Leistung, da der Zugriff auf den Akkumulator viel schneller ist als der Zugriff auf den Hauptspeicher.</p> <p>Es ist wichtig anzumerken, dass der Begriff \"Akkumulator\" in verschiedenen Kontexten unterschiedliche Bedeutungen haben kann. In einigen Prozessorarchitekturen kann der Begriff auch f\u00fcr spezielle Register verwendet werden, die f\u00fcr bestimmte Aufgaben wie Gleitkommaoperationen, Adressberechnungen oder Vektorverarbeitung bestimmt sind. In jedem Fall bezieht sich ein Akkumulator jedoch auf ein Register, das f\u00fcr die Zwischenspeicherung von Daten w\u00e4hrend der Ausf\u00fchrung von Operationen verwendet wird.</p>","tags":["Aufbau & Funktion"]},{"location":"Komponenten/Speicherbegriffe.html","title":"Speicherbegriffe","text":"","tags":["Komponenten"]},{"location":"Komponenten/Speicherbegriffe.html#fluchtig-nicht-fluchtig","title":"Fl\u00fcchtig / nicht fl\u00fcchtig","text":"","tags":["Komponenten"]},{"location":"Komponenten/Speicherbegriffe.html#statisch-dynamisch","title":"Statisch / dynamisch","text":"","tags":["Komponenten"]},{"location":"Micro/Microcomputer.html","title":"Microcomputer","text":"<p>Ein Microcomputer ist ein Computer, der auf einem einzigen integrierten Schaltkreis oder einem Mikroprozessor basiert. Er enth\u00e4lt alle wesentlichen Komponenten eines Computers, wie Prozessor, Speicher, Ein- und Ausgabeschnittstellen sowie Peripherieger\u00e4te. Microcomputer sind klein, kosteng\u00fcnstig und energieeffizient, was sie f\u00fcr pers\u00f6nliche Computer, eingebettete Systeme und mobile Ger\u00e4te wie Smartphones und Tablets geeignet macht. Sie bieten ausreichende Rechenleistung und Funktionalit\u00e4t f\u00fcr eine Vielzahl von Anwendungen und haben zur Verbreitung von Computern in verschiedenen Bereichen beigetragen.</p> <p>Quelle: ChatGPT</p>","tags":["Micro-"]},{"location":"Micro/Microcontroller.html","title":"Mikrocontroller","text":"<p>Der Mikrocontroller ist die Technologie, die nach dem Mikroprozessor entwickelt wurde und die Nachteile des Mikroprozessors \u00fcberwindet. Der Mikrocontroller-Chip ist hochintegriert und bietet CPU, Speicher (RAM und ROM), Register, Interrupt-Steuereinheiten und dedizierte E / A-Anschl\u00fcsse. Es scheint eine Obermenge des Mikroprozessors zu sein. Im Gegensatz zum Mikroprozessor ist der Mikrocontroller nicht von anderen Hardwareeinheiten abh\u00e4ngig, er enth\u00e4lt alle wesentlichen Bausteine \u200b\u200bf\u00fcr die ordnungsgem\u00e4\u00dfe Funktion.</p> <p>Ein Mikrocontroller hat im Bereich eingebetteter Systeme einen h\u00f6heren Stellenwert als der Mikroprozessor, da er kosteng\u00fcnstiger und leicht verf\u00fcgbar ist. Der erste Mikrocontroller TMS 1000 wurde 1974 von Texas Instruments entwickelt. Das grundlegende Design des Mikrocontrollers des TI \u00e4hnelt dem Intels 4004/4040 (4-Bit) -Prozessor, in dem Entwickler Unterst\u00fctzung f\u00fcr RAM, ROM und I / O hinzugef\u00fcgt haben. Ein weiterer Vorteil des Mikrocontrollers ist, dass wir benutzerdefinierte Anweisungen in die CPU schreiben k\u00f6nnen.</p> <p>Quelle</p>","tags":["Micro-"]},{"location":"Micro/Microprozessor.html","title":"Mikroprozessor","text":"<p>Der Mikroprozessor ist ein Siliziumchip, der als zentrale Verarbeitungseinheit (CPU) arbeitet. Es kann Funktionen ausf\u00fchren, einschlie\u00dflich logischer und arithmetischer Funktionen gem\u00e4\u00df den vom Hersteller festgelegten vordefinierten Anweisungen. Eine CPU besteht aus ALU (Arithmetic and Logical Unit), Register und Control Unit. Ein Mikroprozessor kann abh\u00e4ngig vom Befehlssatz und der Systemarchitektur auf viele Arten entworfen werden.</p> <p>Es gibt zwei Systemarchitekturen f\u00fcr den Entwurf eines Mikroprozessors - Harvard und Von-Neumann. Der Prozessor vom Harvard-Typ mit isolierten Bussen f\u00fcr Programm- und Datenspeicher. Im Gegensatz dazu teilt ein Prozessor, der auf der Von-Neumann-Architektur basiert, einen einzigen Bus f\u00fcr Programm- und Datenspeicher.</p> <p>Der Mikroprozessor ist keine unabh\u00e4ngige Einheit, er ist auf andere Hardwareeinheiten wie Speicher, Zeitgeber, Unterbrechungssteuerung usw. angewiesen. Der erste Mikroprozessor wurde von Intel im Jahr 1971 entwickelt und als Intel 4004 bezeichnet.</p> <p>Quelle</p>","tags":["Micro-"]},{"location":"Micro/Unterschiede.html","title":"Unterschiede","text":"<ul> <li>Ein Mikroprozessor besteht aus einem Siliziumchip mit einer arithmetischen Logikeinheit (ALU), einer Steuereinheit (CU) und Registern. Umgekehrt enth\u00e4lt der Mikrocontroller die Eigenschaften eines Mikroprozessors sowie RAM, ROM, Z\u00e4hler, E / A-Ports usw.</li> <li>Der Mikroprozessor ben\u00f6tigt eine Gruppe anderer Chips wie Zeitgeber, Interrupt-Controller sowie Programm- und Datenspeicher, was ihn abh\u00e4ngig macht. Im Gegensatz dazu ben\u00f6tigt der Mikrocontroller keine anderen Hardwareeinheiten, da er bereits damit aktiviert ist.</li> <li>Im Mikrocontroller sind implizite E / A-Anschl\u00fcsse vorhanden, w\u00e4hrend der Mikroprozessor keine integrierten E / A-Anschl\u00fcsse verwendet.</li> <li>Der Mikroprozessor f\u00fchrt allgemeine Operationen aus. Im Gegensatz dazu f\u00fchrt der Mikrocontroller anwendungsorientierte Operationen aus.</li> <li>Bei Mikroprozessoren liegt der Schwerpunkt auf der Leistung und ist daher auf den High-End-Markt ausgerichtet. Auf der anderen Seite Ziel f\u00fcr Mikrocontroller f\u00fcr den Embedded-Markt.</li> <li>Der Stromverbrauch im Mikrocontroller ist besser als der Mikroprozessor.</li> </ul>","tags":["Micro-"]},{"location":"Micro/Unterschiede.html#tabelle","title":"Tabelle","text":"Basis zum Vergleich Mikroprozessor Mikrocontroller Basic Bestehend aus einem einzelnen Siliziumchip bestehend aus ALU, CU und Registern. Bestehend aus Mikroprozessor, Speicher, E / A-Port, Interrupt-Steuereinheit usw. Charakteristisch Abh\u00e4ngige Einheit In sich geschlossene Einheit E / A-Anschl\u00fcsse Enth\u00e4lt keinen integrierten E / A-Port Eingebaute E / A-Anschl\u00fcsse sind vorhanden Art der ausgef\u00fchrten Operation Allzweck in Design und Betrieb. Anwendungsorientiert oder dom\u00e4nenspezifisch. Gezielte f\u00fcr High-End-Markt Embedded-Markt Energieverbrauch Bietet weniger Stromsparm\u00f6glichkeiten Beinhaltet weitere Energiesparoptionen","tags":["Micro-"]},{"location":"Micro/Unterschiede.html#fazit","title":"Fazit","text":"<p>Ein Mikroprozessor kann allgemeine Operationen f\u00fcr mehrere verschiedene Aufgaben ausf\u00fchren. Im Gegenteil, ein Mikrocontroller kann benutzerdefinierte Aufgaben ausf\u00fchren, bei denen er f\u00fcr den gesamten Lebenszyklus dieselbe Aufgabe ausf\u00fchrt.</p>","tags":["Micro-"]},{"location":"Micro/Unterschiede.html#mikroprozessor","title":"Mikroprozessor","text":"<p>Der Mikroprozessor ist ein Prozessor, der vollst\u00e4ndig in einem einzigen Schaltkreis untergebraucht ist. Der Prozessor in einem Personal Computer ist in der Regel ein solcher Mikroprozessor.</p>","tags":["Micro-"]},{"location":"Micro/Unterschiede.html#mikrocontroller","title":"Mikrocontroller","text":"<p>Ein Mikrocontroller ist ein Prozessor, der \u00fcber zus\u00e4tzliche analoge und digitale Ein- und Ausg\u00e4nge verf\u00fcgt und f\u00fcr Steuerungsaufgaben vorgesehen ist. Er wird bereits als vollst\u00e4ndiger Computer angesehen, der im Embedded-Bereich eingeordnet wird.</p> <p>Quelle</p>","tags":["Micro-"]},{"location":"Programmierung/Befehlsausf%C3%BChrung.html","title":"Befehlsausf\u00fchrung","text":"<ol> <li>Der Befehlsz\u00e4hlerinhalt wird auf den Adressbus gelegt.</li> <li>\u00dcber den Datenbus wird der Operations-Code des Befehls ins Befehlsregister geladen.</li> <li>Der Befehlsz\u00e4hler wird erh\u00f6ht.</li> <li>Der Befehl wird decodiert.</li> <li>Wenn n\u00f6tig (bei Mehrbytebefehlen) werden weitere Bytes des Befehls ins Befehlsregister geholt.</li> <li>Der Befehl wird ausgef\u00fchrt.</li> </ol>","tags":["Programmierung"]},{"location":"Programmierung/Befehlsausf%C3%BChrung.html#befehlsarten","title":"Befehlsarten","text":"<ul> <li>Arithmetische Befehle (Grundrechenarten)</li> <li>Logische Befehle (logische Grundverkn\u00fcpfungen)</li> <li>Registrieranweisungen</li> <li>Sprungbefehle</li> <li>Unterprogrammbehandlung</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Befehlsausf%C3%BChrung.html#moderne-prozessoren","title":"Moderne Prozessoren","text":"<ul> <li>Befehle f\u00fcr die Verarbeitung von Audio, Video und Grafik</li> <li>kryptografische Befehle</li> <li>Befehle f\u00fcr spezielle Anwendungen</li> </ul> <p>Quelle</p> <p></p>","tags":["Programmierung"]},{"location":"Programmierung/Befehlsausf%C3%BChrung.html#c-zu-assembler","title":"C zu Assembler","text":"","tags":["Programmierung"]},{"location":"Programmierung/Interrupt.html","title":"Interrupt","text":"<p>Ein Interrupt ist ein Signal oder Ereignis, das den normalen Ablauf eines Programms oder Prozesses unterbricht, um eine spezifische Aufgabe mit hoher Priorit\u00e4t auszuf\u00fchren. Interrupts werden verwendet, um auf externe Ereignisse oder interne Bedingungen zu reagieren, die sofortige Aufmerksamkeit erfordern.</p> <p>Die Verwendung von Interrupts erfordert daher eine sorgf\u00e4ltige Planung und Implementierung, um die Vorteile zu maximieren und die Nachteile zu minimieren. Es ist wichtig, Interrupt-Handler effizient zu gestalten und Konflikte oder Race Conditions zu vermeiden, um ein robustes und zuverl\u00e4ssiges System zu gew\u00e4hrleisten.</p>","tags":["Programmierung"]},{"location":"Programmierung/Interrupt.html#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":"<p>Interrupts finden in verschiedenen Szenarien Anwendung, darunter:</p> <ul> <li>Echtzeitsteuerung: In Echtzeitsystemen werden Interrupts verwendet, um auf zeitkritische Ereignisse zu reagieren, wie z.B. das Eintreffen von Sensordaten oder die Aktualisierung von Eingabeger\u00e4ten.</li> <li>Ger\u00e4teinteraktion: Interrupts erm\u00f6glichen die effiziente Kommunikation zwischen dem Prozessor und externen Ger\u00e4ten wie Tastaturen, M\u00e4usen, Netzwerkkarten oder Peripherieger\u00e4ten, indem sie sofortige Reaktionen auf Ereignisse erm\u00f6glichen.</li> <li>Multitasking: Interrupts erm\u00f6glichen das kooperative Multitasking, bei dem der Prozessor zwischen verschiedenen Aufgaben hin- und herwechseln kann, ohne dass jede Aufgabe aktiv um Prozessorzeit konkurrieren muss.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Interrupt.html#vorteile","title":"Vorteile","text":"<ul> <li>Echtzeitreaktion: Interrupts erm\u00f6glichen die sofortige Reaktion auf Ereignisse mit hoher Priorit\u00e4t, was in Echtzeitanwendungen entscheidend ist.</li> <li>Effiziente Ressourcennutzung: Durch die Verwendung von Interrupts kann der Prozessor seine Zeit effizient nutzen, indem er Aufgaben priorisiert und die Rechenleistung entsprechend verteilt.</li> <li>Vereinfachte Programmierung: Interrupts erleichtern die Programmierung von Systemen, indem sie die Handhabung asynchroner Ereignisse vereinfachen und die Synchronisation zwischen Aufgaben erleichtern.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Interrupt.html#nachteile","title":"Nachteile","text":"<ul> <li>Komplexit\u00e4t: Die korrekte Verwendung von Interrupts erfordert ein gr\u00fcndliches Verst\u00e4ndnis der Hardware- und Software-Interaktionen, da sie in den normalen Ausf\u00fchrungsfluss des Programms eingreifen und sorgf\u00e4ltig behandelt werden m\u00fcssen.</li> <li>Race Conditions: Bei unsachgem\u00e4\u00dfer Handhabung k\u00f6nnen Interrupts zu Race Conditions f\u00fchren, bei denen mehrere Interrupts gleichzeitig auftreten und zu unvorhersehbarem Verhalten f\u00fchren k\u00f6nnen.</li> <li>Debugging: Die Fehlersuche in Systemen mit Interrupts kann komplex sein, da sie zu unerwarteten Ausf\u00fchrungsreihenfolgen und Zust\u00e4nden f\u00fchren k\u00f6nnen, die schwer zu verfolgen sind.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Multitasking.html","title":"Multitasking","text":"<p>Pr\u00e4emptiv: Threads entscheiden nicht, wann sie laufen und sind gezwungen, sich die CPU zu teilen</p> <p>Kooperativ: Jeder Thread entscheidet, sobald er l\u00e4uft, wie lange er die CPU beh\u00e4lt und (entscheidend) wann es Zeit ist, sie abzugeben, damit ein anderer Thread sie nutzen kann.</p> <p>Quelle</p>","tags":["Programmierung"]},{"location":"Programmierung/Multitasking.html#praemptiv","title":"Pr\u00e4emptiv","text":"<p>Beim kooperativen Multitasking hat der Planer keinen Einfluss darauf, wann ein Thread laufen kann. Jeder Thread entscheidet, wie lange er die CPU beh\u00e4lt. Wenn er beschlie\u00dft, die CPU nicht mit anderen Threads zu teilen, werden keine anderen Threads ausgef\u00fchrt, was zu einer so genannten \"Hungersnot\" f\u00fchrt.</p>","tags":["Programmierung"]},{"location":"Programmierung/Multitasking.html#kooperativ","title":"Kooperativ","text":"<p>Das bedeutet, dass die Threads keine Kontrolle dar\u00fcber haben, wann und/oder wie lange sie die CPU nutzen und laufen werden. Es ist der Scheduler (eine Komponente des Betriebssystems), der zu jedem Zeitpunkt entscheidet, welcher Thread laufen kann und welcher schlafen muss. Es gibt keine festen Garantien daf\u00fcr, wann ein Thread das n\u00e4chste Mal laufen wird und wie lange. Das liegt ganz in der Hand des Schedulers.</p>","tags":["Programmierung"]},{"location":"Programmierung/RTOS.html","title":"RTOS - Real Time Operating System","text":"<p>Ein RTOS (Real-Time Operating System) ist ein Betriebssystem, das speziell f\u00fcr Echtzeitanwendungen entwickelt wurde.</p> <p>Es erm\u00f6glicht die pr\u00e4zise und deterministische Ausf\u00fchrung von Aufgaben innerhalb vordefinierter Zeitvorgaben.</p> <p>Ein RTOS bietet Mechanismen zur Priorisierung von Aufgaben, zur Zeitplanung, zum Ressourcenmanagement und zur Synchronisierung von Prozessen. Es eignet sich f\u00fcr Anwendungen, die Echtzeitanforderungen haben, wie z.B. industrielle Steuerungen, Robotik, medizinische Ger\u00e4te und Automobiltechnik. Ein RTOS erm\u00f6glicht es Entwicklern, komplexe Systeme mit mehreren gleichzeitig ablaufenden Aufgaben zu entwerfen und sicherzustellen, dass kritische Operationen rechtzeitig ausgef\u00fchrt werden.</p>","tags":["Programmierung"]},{"location":"Programmierung/RTOS.html#anwendungsgebiete","title":"Anwendungsgebiete","text":"<p>RTOS (Real-Time Operating Systems) werden in einer Vielzahl von Anwendungen eingesetzt, bei denen Echtzeitanforderungen von entscheidender Bedeutung sind. Hier sind einige Anwendungsgebiete von RTOS:</p> <ul> <li> <p>Industrielle Steuerungssysteme: RTOS werden in industriellen Automatisierungssystemen wie Fabrikautomatisierung, Robotik, Prozesssteuerung und CNC-Maschinen eingesetzt, um pr\u00e4zise und zeitkritische Aufgaben zu erf\u00fcllen.</p> </li> <li> <p>Medizinische Ger\u00e4te: In medizinischen Ger\u00e4ten wie Herzmonitoren, Beatmungsger\u00e4ten, Infusionspumpen und bildgebenden Systemen sorgt ein RTOS f\u00fcr die zeitnahe und zuverl\u00e4ssige Verarbeitung von Daten sowie die Steuerung und \u00dcberwachung von medizinischen Abl\u00e4ufen.</p> </li> <li> <p>Telekommunikationssysteme: RTOS kommen in Netzwerk-Routern, Mobiltelefonen, Kommunikationsinfrastrukturen und anderen telekommunikationsbezogenen Ger\u00e4ten zum Einsatz, um eine effiziente Verarbeitung von Datenstr\u00f6men, Signalisierung und Kommunikationsprotokollen zu gew\u00e4hrleisten.</p> </li> <li> <p>Luft- und Raumfahrt: In Flugzeugen, Satelliten, Drohnen und anderen Luft- und Raumfahrtanwendungen werden RTOS verwendet, um Flugsteuerung, Navigation, Sensorverarbeitung und Kommunikation sicherzustellen.</p> </li> <li> <p>Fahrzeugelektronik: In Fahrzeugen sind RTOS in Einsatzbereichen wie Motorsteuerung, Bremsen, Lenkung, Infotainment-Systemen und Fahrerassistenzsystemen von Bedeutung, um die Echtzeitverarbeitung von Sensordaten und Steuerungsbefehlen zu erm\u00f6glichen.</p> </li> </ul> <p>Diese sind nur einige Beispiele, da RTOS in vielen anderen Bereichen eingesetzt werden, in denen eine pr\u00e4zise und zeitkritische Ausf\u00fchrung von Aufgaben erforderlich ist.</p>","tags":["Programmierung"]},{"location":"Programmierung/RTOS.html#vorteile","title":"Vorteile","text":"<ul> <li>Echtzeitausf\u00fchrung: RTOS erm\u00f6glichen die pr\u00e4zise und deterministische Ausf\u00fchrung von Aufgaben, sodass Echtzeitanforderungen erf\u00fcllt werden k\u00f6nnen.</li> <li>Aufgabenzuordnung und -priorisierung: RTOS bieten Mechanismen zur Zuordnung von Priorit\u00e4ten zu Aufgaben, sodass kritische Aufgaben rechtzeitig ausgef\u00fchrt werden k\u00f6nnen.</li> <li>Ressourcenmanagement: RTOS verwalten effizient die gemeinsame Nutzung von Ressourcen wie Speicher, Peripherieger\u00e4ten und Kommunikationskan\u00e4len.</li> <li>Einfache Systementwicklung: RTOS bieten oft eine Vielzahl von vorgefertigten Diensten und APIs, die die Entwicklung komplexer Systeme erleichtern und beschleunigen k\u00f6nnen.</li> <li>Skalierbarkeit: RTOS erm\u00f6glichen die Erweiterung von Systemen durch die Hinzuf\u00fcgung weiterer Aufgaben und Ressourcen, ohne dass die grundlegende Struktur ge\u00e4ndert werden muss.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/RTOS.html#nachteile","title":"Nachteile","text":"<ul> <li>Overhead: Die Implementierung eines RTOS erfordert zus\u00e4tzlichen Speicher- und Prozessoroverhead, um die Verwaltung der Tasks und Ressourcen zu erm\u00f6glichen.</li> <li>Komplexit\u00e4t: Die Verwendung eines RTOS erfordert ein Verst\u00e4ndnis der spezifischen Betriebsmechanismen und Konzepte, was die Entwicklung und das Debugging von Systemen komplexer machen kann.</li> <li>Ressourcenverbrauch: Aufgrund der zus\u00e4tzlichen Verwaltungsfunktionen kann ein RTOS mehr Ressourcen (wie CPU-Zeit, Speicher) verbrauchen als ein einfacheres Betriebssystem oder eine Bare-Metal-Umgebung.</li> <li>Lernkurve: Die Einarbeitung in die Verwendung und Konfiguration eines RTOS erfordert m\u00f6glicherweise zus\u00e4tzliche Schulung und Kenntnisse im Vergleich zu anderen Systementwicklungsans\u00e4tzen.</li> <li>Abh\u00e4ngigkeit von Lieferanten: Die Wahl und Abh\u00e4ngigkeit von einem bestimmten RTOS erfordert eine sorgf\u00e4ltige Auswahl und eine Bewertung der Support- und Update-Politik des Anbieters.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Semaphoren.html","title":"Semaphoren","text":"<p>Semaphoren sind ein Konzept der synchronen Programmierung, das zur Steuerung des Zugriffs auf gemeinsam genutzte Ressourcen verwendet wird. Sie dienen dazu, Konflikte und Deadlocks zu vermeiden, indem sie den Zugriff auf Ressourcen zwischen verschiedenen Threads oder Prozessen koordinieren.</p>","tags":["Programmierung"]},{"location":"Programmierung/Semaphoren.html#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":"<p>Semaphoren finden in verschiedenen Szenarien Anwendung, darunter:</p> <ul> <li>Synchronisation von Threads: Semaphoren erm\u00f6glichen die Synchronisation von Threads, indem sie sicherstellen, dass kritische Abschnitte des Codes nicht gleichzeitig von mehreren Threads betreten werden.</li> <li>Begrenzung des Zugriffs auf Ressourcen: Semaphoren k\u00f6nnen verwendet werden, um den Zugriff auf begrenzte Ressourcen, wie zum Beispiel Datenbankverbindungen oder Drucker, zu steuern und sicherzustellen, dass sie nicht \u00fcberbeansprucht werden.</li> <li>Vermeidung von Deadlocks: Durch den Einsatz von Semaphoren k\u00f6nnen Deadlocks, bei denen sich mehrere Prozesse oder Threads gegenseitig blockieren, vermieden werden, indem sie den Zugriff auf Ressourcen entsprechend synchronisieren.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Semaphoren.html#vorteile","title":"Vorteile","text":"<ul> <li>Synchronisation: Semaphoren bieten einen Mechanismus zur Synchronisation von Threads oder Prozessen, um kritische Abschnitte des Codes zu sch\u00fctzen und Dateninkonsistenzen zu vermeiden.</li> <li>Flexibilit\u00e4t: Semaphoren k\u00f6nnen unterschiedliche Zugriffsbeschr\u00e4nkungen und Sperren implementieren, wie zum Beispiel exklusiven Zugriff, gegenseitigen Ausschluss oder eine bestimmte Anzahl von Zugriffen auf eine Ressource.</li> <li>Vermeidung von Deadlocks: Durch die ordnungsgem\u00e4\u00dfe Verwendung von Semaphoren kann das Auftreten von Deadlocks reduziert oder vollst\u00e4ndig vermieden werden.</li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Semaphoren.html#nachteile","title":"Nachteile","text":"<ul> <li>Komplexit\u00e4t: Die korrekte Verwendung von Semaphoren erfordert ein gr\u00fcndliches Verst\u00e4ndnis der Synchronisationsmechanismen und kann komplex sein, insbesondere bei komplexen Systemen mit vielen Threads oder Prozessen.</li> <li>Ressourcenverbrauch: Semaphoren verbrauchen selbst Ressourcen und f\u00fchren zu zus\u00e4tzlichem Overhead, da sie verwaltet und aktualisiert werden m\u00fcssen.</li> <li>Fehlende feinere Steuerung: Semaphoren allein bieten m\u00f6glicherweise nicht gen\u00fcgend Steuerungsm\u00f6glichkeiten f\u00fcr spezifische Anforderungen und erfordern m\u00f6glicherweise zus\u00e4tzliche Mechanismen wie Mutexe oder Bedingungsvariablen.</li> </ul> <p>Quelle</p>","tags":["Programmierung"]},{"location":"Programmierung/Timer.html","title":"Timer","text":"","tags":["Programmierung"]},{"location":"Programmierung/Timer.html#periodic-timer","title":"Periodic Timer:","text":"<p>Ein Periodic Timer ist ein Timer, der in regelm\u00e4\u00dfigen Intervallen ausgel\u00f6st wird und periodisch wiederkehrende Aufgaben erm\u00f6glicht. Der Timer wird so konfiguriert, dass er nach einer bestimmten Zeitspanne abl\u00e4uft und dann automatisch erneut gestartet wird. Ein Periodic Timer wird h\u00e4ufig f\u00fcr wiederkehrende Aktualisierungen, regelm\u00e4\u00dfige Abfragen oder Zeitgeberfunktionen verwendet.</p> <ul> <li>Aktualisierung von Benutzeroberfl\u00e4chen: Ein Periodic Timer kann verwendet werden, um regelm\u00e4\u00dfige Aktualisierungen von Benutzeroberfl\u00e4chen durchzuf\u00fchren, beispielsweise zur Aktualisierung von Informationen, zum Anzeigen von Animationen oder zum \u00dcberwachen von Status\u00e4nderungen.</li> <li> <p>Datenerfassung und -verarbeitung: In Anwendungen, die Daten von Sensoren oder anderen Quellen erfassen, kann ein Periodic Timer verwendet werden, um regelm\u00e4\u00dfige Messungen oder Probenahmen durchzuf\u00fchren und die Daten anschlie\u00dfend zu verarbeiten.</p> </li> <li> <p>Zeitbasierte Steuerung: Ein Periodic Timer kann verwendet werden, um zeitgesteuerte Aktionen auszul\u00f6sen, beispielsweise um regelm\u00e4\u00dfige \u00dcberpr\u00fcfungen durchzuf\u00fchren, Alarme auszul\u00f6sen oder zeitabh\u00e4ngige Aufgaben auszuf\u00fchren.</p> </li> </ul>","tags":["Programmierung"]},{"location":"Programmierung/Timer.html#once-timer","title":"Once Timer:","text":"<p>Ein Once Timer hingegen wird nur einmal ausgel\u00f6st und l\u00e4uft dann nicht wiederholt ab. Er wird in Situationen eingesetzt, in denen eine einmalige zeitgesteuerte Aktion oder Verz\u00f6gerung erforderlich ist.</p> <ul> <li>Verz\u00f6gerung beim Systemstart: Ein Once Timer kann verwendet werden, um eine Verz\u00f6gerung beim Systemstart zu erzeugen, bevor bestimmte Aktionen oder Initialisierungen durchgef\u00fchrt werden.</li> <li> <p>Zeitgesteuerte Ereignisse: Ein Once Timer kann verwendet werden, um eine zeitgesteuerte Aktion zu planen, beispielsweise das Ausl\u00f6sen einer Alarmmeldung nach einer bestimmten Verz\u00f6gerungszeit oder das Planen einer automatischen Abschaltung.</p> </li> <li> <p>Zeitgesteuerte Aufgaben: In bestimmten Anwendungen k\u00f6nnen einmalige Timer verwendet werden, um zeitlich begrenzte Aufgaben auszul\u00f6sen, wie beispielsweise das Versenden von periodischen Berichten oder das Planen von Wartungsarbeiten.</p> </li> </ul> <p>Beide Timerarten bieten M\u00f6glichkeiten zur zeitgesteuerten Ausf\u00fchrung von Aufgaben, unterscheiden sich jedoch in ihrer Wiederholungslogik und werden je nach Anwendungsfall entsprechend eingesetzt.</p>","tags":["Programmierung"]},{"location":"Tags.html","title":"Tags","text":"<p>Diese Webseite verf\u00fcgt \u00fcber folgende Tags:</p>"},{"location":"Tags.html#aufbau-funktion","title":"Aufbau &amp; Funktion","text":"<ul> <li>ALU</li> <li>CU</li> <li>Cache</li> <li>Register</li> </ul>"},{"location":"Tags.html#komponenten","title":"Komponenten","text":"<ul> <li>Speicherbegriffe</li> </ul>"},{"location":"Tags.html#micro-","title":"Micro-","text":"<ul> <li>Microcomputer</li> <li>Microcontroller</li> <li>Microprozessor</li> <li>Unterschiede</li> </ul>"},{"location":"Tags.html#programmierung","title":"Programmierung","text":"<ul> <li>Befehlsausf\u00fchrung</li> <li>Interrupt</li> <li>Multitasking</li> <li>RTOS</li> <li>Semaphoren</li> <li>Timer</li> </ul>"}]}